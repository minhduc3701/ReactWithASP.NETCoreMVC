{"version":3,"file":"useMergedRefs.js","sourceRoot":"../src/","sources":["useMergedRefs.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAyB,MAAM,OAAO,CAAC;AAEnE;;;;GAIG;AACH,MAAM,UAAU,aAAa;IAAI,cAAiB;SAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;QAAjB,yBAAiB;;IAChD,IAAM,KAAK,GAAG,MAAM,EAA0B,CAAC;IAE/C,oBAAoB;IACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;IAErB,OAAO,WAAW,CAAC,UAAC,KAAQ;QAC1B,KAAkB,UAAc,EAAd,KAAA,KAAK,CAAC,OAAQ,EAAd,cAAc,EAAd,IAAc,EAAE;YAA7B,IAAM,GAAG,SAAA;YACZ,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;gBAC7B,GAAG,CAAC,KAAK,CAAC,CAAC;aACZ;iBAAM,IAAI,GAAG,EAAE;gBACd,qDAAqD;gBACnD,GAAuC,CAAC,OAAO,GAAG,KAAK,CAAC;aAC3D;SACF;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC","sourcesContent":["import { useRef, useCallback, Ref, MutableRefObject } from 'react';\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\nexport function useMergedRefs<T>(...refs: Ref<T>[]): (instance: T) => void {\n  const state = useRef<(Ref<T> | undefined)[]>();\n\n  // Update refs list.\n  state.current = refs;\n\n  return useCallback((value: T) => {\n    for (const ref of state.current!) {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ((ref as unknown) as MutableRefObject<T>).current = value;\n      }\n    }\n  }, []);\n}\n"]}